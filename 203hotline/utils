#!/usr/bin/env python3

import time
import math

class utils:
    def loop_value(n, k):
        i = 0
        res = 1

        if (k > n - k):
            k = n - k
        while (i <= k - 1):
            res *= (n - i) / (k - i)
            i += 1
        return res

    def build_values(lambda_func):
        i = 0
        values = []
        tmp = 0.0

        start = time.time()
        while (i <= 50):
            tmp = lambda_func(i)
            values.append([i, tmp])
            i += 1
        end = time.time()
        return values, ((end - start) * 1000)

    def get_overload(values):
        overload_index = 0.0
        i = 0

        while (i <= 25):
            overload_index += values[i][1]
            i += 1
        return (1 - overload_index) * 100 # We need a percentage


    def print_type_values(values, type, time):
        i = 0

        print(type, "distribution:")
        for _tuple in values:
            print(_tuple[0], "->", "%.3f" % _tuple[1], end='')
            if i == 4 or _tuple[0] == 50:
                print()
                i = 0
            else:
                print(end='\t')
                i += 1
        print("Overload: ", "%.1f" % utils.get_overload(values), "%", sep='')
        print("computation time:", "%.2f" % time, "ms")

    def my_comb(n, k):
        return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))
