#!/usr/bin/env python3

from imp import load_source
import math

printer = load_source('printer', './printer').printer
parser = load_source('parser', './parser').parser
utils = load_source('utils', './utils').utils

class algorithm:
    def __init__(this):
        parser_obj = parser(True)
        this.a, this.b, this.tab = parser_obj.get_parced_data()
        this.X_exp = []
        this.Y_exp = []
        this.printer = printer()

    def __get_tab_sum(this, i, j, mode)-> float:
        result = 0
        for k in range(5):
            result += this.tab[i][j]
            if mode == 1:
                j += 1
            else:
                i += 1
        return result
    def __joint_law(this) -> None:
        for i in range(len(this.tab)):
            print("Y=" + str((i + 1) * 10), end='\t')
            for j in range(len(this.tab[i])):
                print("%.3f" % this.tab[i][j], end='\t')
            this.Y_exp.append(this.__get_tab_sum(i, 0, 1))
            print("%.3f" % this.__get_tab_sum(i, 0, 1))
        print("X law\t", end='')
        for i in range(len(this.tab) - 1):
            this.X_exp.append(this.__get_tab_sum(0, i, 0))
            print("%.3f" % this.__get_tab_sum(0, i, 0), end='\t')
        this.X_exp.append(this.__get_tab_sum(0, i + 1, 0))
        print("%.3f" % this.__get_tab_sum(0, i + 1, 0) + "\t1.000")

    def __law(this) -> None:
        for i in range(2, 11):
            result = 0.0
            count = 0.0
            for y in range(1, 6):
                for x in range(1, 6):
                    result = utils.get_result(x * 10, y * 10, this.a, this.b)
                    if (x + y == i and y < 6):
                        count += result
            this.printer.append_sum_law(count)

    def __variance(this) -> None:
        expX = 0.0
        expY = 0.0
        totalX = 0.0
        totalY = 0.0
        for i in range(0, 5):
            totalX += this.X_exp[i] * ((i + 1) * 10)
            totalY += this.Y_exp[i] * ((i + 1) * 10)
        for i in range(0, 5):
            expX += ((i + 1) * 10 - totalX) * ((i + 1) * 10 - totalX) * this.X_exp[i]
            expY += ((i + 1) * 10 - totalY) * ((i + 1) * 10 - totalY) * this.Y_exp[i]

        this.printer.fill_others(expX, expY, totalX, totalY)

    def __str__(this):
        print("-" * 80)
        print("\tX=10\tX=20\tX=30\tX=40\tX=50\tY law")
        this.__joint_law()
        this.__law()
        this.__variance()
        print(this.printer, end='')
        return ""