#!/usr/bin/env python3

from math import sqrt, factorial
from typing import Callable as Call

class utils:
    # ps -> sample piece, nbs -> number of sample, x -> observed class, Ox -> observed size
    def GetProb(ps:int, nbs:int, x:int, Ox:int) -> float:
        sf = 0
        for i in range(len(x)):
            sf += (x[i][0] * Ox[i])
        return sf / (ps * nbs)

    def GetBinomialCoef(n:int, k:int) -> int:
        return int(factorial(n) / (factorial(k) * factorial(n - k)))

    def GetBinomial(n:int, k:int, p:float) -> int:
        return utils.GetBinomialCoef(n, k) * (p ** k) * ((1 - p) ** (n - k))

    def GetTheoreticalSize(x:int, ps:int, nbs:int, p:float) -> float:
        return nbs * utils.GetBinomial(ps, x, p)