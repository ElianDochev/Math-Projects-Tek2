#!/usr/bin/env python3

from imp import load_source
from math import sqrt
from copy import deepcopy
from typing import Callable as Call

parser = load_source('parser', './parser').parser
utils = load_source('utils', './utils').utils

class algorithm:
    def __init__(this):
        parser_obj = parser(True)
        numeric_args:list = parser_obj.get_parced_data()
        this.oi:list = deepcopy(numeric_args)
        this.tx:list = []
        this.nbs =  [[i] for i in range(len(numeric_args))]
        this.p:int = utils.GetProb(100, 100,this.nbs, numeric_args)
        this.chi_square:float = 0
        this.freedom_degree:int = 0
        index:int = 0
        while index < len(this.oi):
            if this.oi[index] < 10:
                if index == 0:
                    this.__sum(this.oi, index)
                    this.__sum(this.nbs, index)
                elif index is len(this.oi) - 1:
                    this.__sum(this.oi, index - 1)
                    this.__sum(this.nbs, index - 1)
                else:
                    if (this.oi[index - 1] <= this.oi[index + 1]):
                        this.__sum(this.oi, index - 1)
                        this.__sum(this.nbs, index - 1)
                    else:
                        this.__sum(this.oi, index)
                        this.__sum(this.nbs, index)
            else:
                index += 1

    def __str__(this) -> str:
        print("   x\t|", end='')
        for nb in this.nbs:
            if (len(nb) > 1):
                if(nb[len(nb) - 1] == 8):
                    print(" {}+\t|".format(nb[0]), end='')
                else:
                    print(" {}-{}\t|".format(nb[0], nb[len(nb) - 1]), end='')
            else:
                if(nb[0] == 8):
                    print(" {}+\t|".format(nb[0]), end='')
                else:
                    print(" {}\t|".format(nb[0]), end='')
        print(" Total")
        print("  Ox\t|", end='')
        for i in range(len(this.oi)):
            print(" {}\t|".format(this.oi[i]), end='')
        print(" 100")
        print("  Tx\t|", end='')
        this.__getTx()
        print(" 100")
        print("Distribution:\t\tB(100, {:.4f})".format(this.p))
        this.__getChiSquare()
        print("Chi-squared:\t\t{:.3f}".format(this.chi_square))
        print("Degrees of freedom: \t{}".format(this.freedom_degree))
        return this.__getFit()

    def __getFit(this) -> str:
        fit = []
        table_offset = [[99, 90, 80, 70, 60, 50, 40, 30, 20, 10, 5, 2, 1],
              [0.00, 0.02, 0.06, 0.15, 0.27, 0.45, 0.71, 1.07, 1.64, 2.71, 3.84, 5.41, 6.63],
              [0.02, 0.21, 0.45, 0.71, 1.02, 1.39, 1.83, 2.41, 3.22, 4.61, 5.99, 7.82, 9.21],
              [0.11, 0.58, 1.01, 1.42, 1.87, 2.37, 2.95, 3.66, 4.64, 6.25, 7.81, 9.84, 11.34],
              [0.30, 1.06, 1.65, 2.19, 2.75, 3.36, 4.04, 4.88, 5.99, 7.78, 9.49, 11.67, 13.28],
              [0.55, 1.61, 2.34, 3.00, 3.66, 4.35, 5.13, 6.06, 7.29, 9.24, 11.07, 13.39, 15.09],
              [0.87, 2.20, 3.07, 3.83, 4.57, 5.35, 6.21, 7.23, 8.56, 10.64, 12.59, 15.03, 16.81],
              [1.24, 2.83, 3.82, 4.67, 5.49, 6.35, 7.28, 8.38, 9.80, 12.02, 14.07, 16.62, 18.48],
              [1.65, 3.49, 4.59, 5.53, 6.42, 7.34, 8.35, 9.52, 11.03, 13.36, 15.51, 18.17, 20.09],
              [2.09, 4.17, 5.38, 6.39, 7.36, 8.34, 9.41, 10.66, 12.24, 14.68, 16.92, 19.68, 21.67],
              [2.56, 4.87, 6.18, 7.27, 8.30, 9.34, 10.47, 11.78, 13.44, 15.99, 18.31, 21.16, 23.21]]
        for i in range(len(table_offset[this.freedom_degree])):
            if (this.chi_square > table_offset[this.freedom_degree][i]):
                try:
                    fit.append(table_offset[0][i + 1])
                except:
                    fit.append(table_offset[0][i])
        if len(fit) == 0:
            return "Fit validity:\t\tP > 99%"
        if len(fit) > 0 and (this.chi_square > table_offset[this.freedom_degree]
        [len(fit) if len(fit) < len(table_offset[this.freedom_degree]) else len(fit) - 1]):
            return "Fit validity:\t\tP < 1%"
        return "Fit validity:\t\t{}% < P < {}%".format(fit[len(fit) - 1], fit[len(fit) - 2])

    def __getChiSquare(this) -> None:
        for i in range(len(this.oi)):
            this.chi_square += ((this.oi[i] - this.tx[i]) ** 2) / this.tx[i]
        this.freedom_degree = len(this.oi) - 2

    def __getTx(this) -> None:
        pool:int = 100
        for var in this.nbs:
            tmp:int = 0
            for i in range(len(var)):
                tmp += utils.GetTheoreticalSize(var[i], 100, 100, this.p)
            pool -= tmp
            if var == this.nbs[len(this.nbs) - 1]:
                tmp += pool
            this.tx.append(tmp)
            print(" {:.1f}\t|".format(tmp), end='')

    def __sum(this, lst:list, index:int) -> None:
        lst[index] += lst[index + 1]
        lst.pop(index + 1)
